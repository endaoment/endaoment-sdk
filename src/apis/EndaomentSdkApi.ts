/* tslint:disable */
/* eslint-disable */
/**
 * Endaoment API
 * The official Endaoment API & SDK endpoints
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DonationSwapDto,
  FundDto,
  OrgDto,
  TransactionDto,
} from '../models';
import {
    DonationSwapDtoFromJSON,
    DonationSwapDtoToJSON,
    FundDtoFromJSON,
    FundDtoToJSON,
    OrgDtoFromJSON,
    OrgDtoToJSON,
    TransactionDtoFromJSON,
    TransactionDtoToJSON,
} from '../models';

export interface GetDeployedOrgsRequest {
    count?: number;
    offset?: number;
}

export interface GetDonationSwapTransactionRequest {
    ein: string;
    amountIn: string;
    tokenContractAddress?: string;
}

export interface GetOrgDeployTransactionRequest {
    ein: string;
}

export interface GetVisibleFundsRequest {
    count?: number;
    offset?: number;
}

export interface SearchDeployedOrgsRequest {
    name?: string;
    nteeMajorCodes?: string;
    count?: number;
    offset?: number;
}

export interface SearchVisibleFundsRequest {
    name: string;
    count?: number;
    offset?: number;
}

/**
 * 
 */
export class EndaomentSdkApi extends runtime.BaseAPI {

    /**
     * Only organizations that already have a deployed contract on Endaoment will be returned
     * Get a list of deployed Org contracts
     */
    async getDeployedOrgsRaw(requestParameters: GetDeployedOrgsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrgDto>>> {
        const queryParameters: any = {};

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/sdk/orgs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrgDtoFromJSON));
    }

    /**
     * Only organizations that already have a deployed contract on Endaoment will be returned
     * Get a list of deployed Org contracts
     */
    async getDeployedOrgs(requestParameters: GetDeployedOrgsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrgDto>> {
        const response = await this.getDeployedOrgsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the transaction information required to swap and donate a given token amount to an org
     */
    async getDonationSwapTransactionRaw(requestParameters: GetDonationSwapTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DonationSwapDto>> {
        if (requestParameters.ein === null || requestParameters.ein === undefined) {
            throw new runtime.RequiredError('ein','Required parameter requestParameters.ein was null or undefined when calling getDonationSwapTransaction.');
        }

        if (requestParameters.amountIn === null || requestParameters.amountIn === undefined) {
            throw new runtime.RequiredError('amountIn','Required parameter requestParameters.amountIn was null or undefined when calling getDonationSwapTransaction.');
        }

        const queryParameters: any = {};

        if (requestParameters.ein !== undefined) {
            queryParameters['ein'] = requestParameters.ein;
        }

        if (requestParameters.tokenContractAddress !== undefined) {
            queryParameters['tokenContractAddress'] = requestParameters.tokenContractAddress;
        }

        if (requestParameters.amountIn !== undefined) {
            queryParameters['amountIn'] = requestParameters.amountIn;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/sdk/donations/swap`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DonationSwapDtoFromJSON(jsonValue));
    }

    /**
     * Get the transaction information required to swap and donate a given token amount to an org
     */
    async getDonationSwapTransaction(requestParameters: GetDonationSwapTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DonationSwapDto> {
        const response = await this.getDonationSwapTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the transaction information required to deploy a given org
     */
    async getOrgDeployTransactionRaw(requestParameters: GetOrgDeployTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TransactionDto>> {
        if (requestParameters.ein === null || requestParameters.ein === undefined) {
            throw new runtime.RequiredError('ein','Required parameter requestParameters.ein was null or undefined when calling getOrgDeployTransaction.');
        }

        const queryParameters: any = {};

        if (requestParameters.ein !== undefined) {
            queryParameters['ein'] = requestParameters.ein;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/sdk/orgs/deploy`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TransactionDtoFromJSON(jsonValue));
    }

    /**
     * Get the transaction information required to deploy a given org
     */
    async getOrgDeployTransaction(requestParameters: GetOrgDeployTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TransactionDto> {
        const response = await this.getOrgDeployTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Only community and transparent funds will be returned
     * Get a list of Endaoment funds
     */
    async getVisibleFundsRaw(requestParameters: GetVisibleFundsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FundDto>>> {
        const queryParameters: any = {};

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/sdk/funds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FundDtoFromJSON));
    }

    /**
     * Only community and transparent funds will be returned
     * Get a list of Endaoment funds
     */
    async getVisibleFunds(requestParameters: GetVisibleFundsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FundDto>> {
        const response = await this.getVisibleFundsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Note: If using `name` and `nteeMajorCodes`, the search will perform an AND operation of both inputs
     * Get a list of deployed Endaoment Orgs, filtered by search parameter
     */
    async searchDeployedOrgsRaw(requestParameters: SearchDeployedOrgsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<OrgDto>>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.nteeMajorCodes !== undefined) {
            queryParameters['nteeMajorCodes'] = requestParameters.nteeMajorCodes;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/sdk/orgs/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OrgDtoFromJSON));
    }

    /**
     * Note: If using `name` and `nteeMajorCodes`, the search will perform an AND operation of both inputs
     * Get a list of deployed Endaoment Orgs, filtered by search parameter
     */
    async searchDeployedOrgs(requestParameters: SearchDeployedOrgsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<OrgDto>> {
        const response = await this.searchDeployedOrgsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Only community and transparent funds will be returned
     * Get a list of Endaoment Funds, filtered by search paramenter
     */
    async searchVisibleFundsRaw(requestParameters: SearchVisibleFundsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FundDto>>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling searchVisibleFunds.');
        }

        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.count !== undefined) {
            queryParameters['count'] = requestParameters.count;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/sdk/funds/search`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FundDtoFromJSON));
    }

    /**
     * Only community and transparent funds will be returned
     * Get a list of Endaoment Funds, filtered by search paramenter
     */
    async searchVisibleFunds(requestParameters: SearchVisibleFundsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FundDto>> {
        const response = await this.searchVisibleFundsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
